<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-10-26 at 14:25:08.
 */
class Lengow_CheckTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Lengow_Check
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Lengow_Check;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Lengow_Check::is_valid_auth
     */
    public function testIs_valid_auth()
    {
        $check = new Lengow_Check();
        Lengow_Configuration::update_value('lengow_account_id', '');
        Lengow_Configuration::update_value('lengow_access_token', 'lengow_access_token');
        Lengow_Configuration::update_value('lengow_secret_token', 'lengow_secret_token');

        $this->assertEquals(false, $check->is_valid_auth());

        Lengow_Configuration::update_value('lengow_account_id', '1111');
        Lengow_Configuration::update_value('lengow_access_token', 'lengow_access_token');
        Lengow_Configuration::update_value('lengow_secret_token', 'lengow_secret_token');

        $stub = $this->createMock(Lengow_Connector::class);
        $stub->method('get')->willReturn(false);

        $this->assertEquals(false, $check->is_valid_auth());

        Lengow_Configuration::update_value('lengow_account_id', '1111');
        Lengow_Configuration::update_value('lengow_access_token', 'lengow_access_token');
        Lengow_Configuration::update_value('lengow_secret_token', 'lengow_secret_token');

        $stub = $this->createMock(Lengow_Connector::class);
        $stub->method('connect')->willReturn(array("token" => "token", "account_id" => "", "" => "user_id"));

        $this->assertEquals(false, $check->is_valid_auth());

        /* TODO */

/*        Lengow_Configuration::update_value('lengow_account_id', '1111');
        Lengow_Configuration::update_value('lengow_access_token', 'lengow_access_token');
        Lengow_Configuration::update_value('lengow_secret_token', 'lengow_secret_token');

        echo Lengow_Configuration::get('lengow_account_id')."\n".Lengow_Configuration::get('lengow_access_token').
            "\n".Lengow_Configuration::get('lengow_secret_token');

        $stub = $this->createMock(Lengow_Connector::class);
        $stub->method('connect')->willReturn(array("token" => "token", "account_id" => "account_id", "user_id" => "user_id"));

        $this->assertEquals(true, $check->is_curl_activated());
        $this->assertEquals(array("token" => "token", "account_id" => "account_id", "user_id" => "user_id"), $stub->connect());

        $this->assertEquals(true, $check->is_valid_auth());*/

    }

    /**
     * @covers Lengow_Check::get_admin_content()
     */
    public function testGet_admin_content()
    {
        $check = new Lengow_Check();
        $fixture = New Fixture();
        $this->assertEquals(null, $fixture->invokeMethod($check, "get_admin_content"));

        $plop = array(
            array( 'header' => "mon header 1"),
            array( 'title' => "mon title 1",  'message' => "mon message 1"),
            array( 'title' => "mon title 2",  'state' => 1),
            array( 'header' => "mon header 2"),
            array( 'title' => "mon title 3",  'message' => "mon message 3"),
            array( 'title' => "mon title 4",  'state' => 0, 'help' => 'aide',
                'help_link' => 'mon lien', 'help_label' => 'mon label help')
        );

        $this->assertEquals('<table class="table" cellpadding="0" cellspacing="0"><tr><td colspan="2" align="center" style="border:0"><h4>mon header 1</h4></td></tr><tr><td><b>mon title 1</b></td><td align="right"><b>mon message 1</b></td></tr><tr><td><b>mon title 2</b></td><td align="right"><i class="fa fa-check lengow-green"></i></td></tr><tr><td colspan="2" align="center" style="border:0"><h4>mon header 2</h4></td></tr><tr><td><b>mon title 3</b></td><td align="right"><b>mon message 3</b></td></tr><tr><td><b>mon title 4</b></td><td align="right"><i class="fa fa-times lengow-red"></i></td><tr><td colspan="2"><p>aide<br /><a target="_blank" href="mon lien">mon label help</a></p></td></tr></tr></table>', $fixture->invokeMethod($check, "get_admin_content", array($plop)));
    }

}
