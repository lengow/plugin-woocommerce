<?php

    /**
     * Generated by PHPUnit_SkeletonGenerator on 2016-10-26 at 15:18:53.
     */
    class Lengow_ConnectorTest extends \PHPUnit_Framework_TestCase
    {
        /**
         * @var Lengow_Connector
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
            $this->object = new Lengow_Connector('', '');
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
        }

        /**
         * @covers Lengow_Connector::connect
         */
        public function testConnect()
        {
            $connector = new Lengow_Connector('lengow_access_token', 'lengow_secret_token');
            $this->assertEquals(false, $connector->connect());

            //$fixture = New Fixture();
            //$this->assertEquals('15.00', $fixture->invokeMethod($this->object, "_get_price"));
            //Impossible car call_action est privée donc pas possible de mocker
            //$stub = $this->createMock(Lengow_Connector::class);
            //$stub->method('call_action')->willReturn(array("token" => "token", "account_id" => "account_id", "user_id" => "user_id"));
            //$this->assertEquals('plop', $connector->connect());

        }

        /**
         * @covers Lengow_Connector::call
         */
        public function testCall()
        {
            $connector = new Lengow_Connector('lengow_access_token', 'lengow_secret_token');
            $this->assertEquals('log.connector.error_curl[error_code==6|error_message==Could not resolve host: ]',
                $connector->call("plop"));
            //Impossible car call_action est privée donc pas possible de mocker
            //$stub = $this->createMock(Lengow_Connector::class);
            //$stub->method('call_action')->willReturn(array("token" => "token", "account_id" => "account_id", "user_id" => "user_id"));

        }

        /**
         * @covers Lengow_Connector::make_request
         */
        public function testMake_request()
        {
            $connector = new Lengow_Connector('lengow_access_token', 'lengow_secret_token');
            $fixture = New Fixture();
            //$result = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<title>405 Method Not Allowed</title>\n" .
            //    "<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p>\n";
            $this->assertContains("405", $fixture->invokeMethod($connector, 'make_request',
                array("plop", "/v3.0/cms", array('foo' => 'foo', 'bar' => 'bar'), "token")));
            $this->assertContains("403",
                $fixture->invokeMethod($connector, 'make_request',
                    array("GET", "/v3.0/cms", array('foo' => 'foo', 'bar' => 'bar'), "token")));
            $this->assertContains("403",
                $fixture->invokeMethod($connector, 'make_request',
                    array("PUT", "/v3.0/cms", array('foo' => 'foo', 'bar' => 'bar'), "token")));
            // Impossible de tester l'erreur timeout car il faudrait mocker curl_errno() et curl_exec() pour
            // $result === false

        }

        /**
         * @covers Lengow_Connector::get_access_id
         */
        public function testGet_access_id()
        {
            $connector = new Lengow_Connector('lengow_access_token', 'lengow_secret_token');
            Lengow_Configuration::update_value('lengow_account_id', '1111');
            Lengow_Configuration::update_value('lengow_access_token', 'lengow_access_token');
            Lengow_Configuration::update_value('lengow_secret_token', 'lengow_secret_token');

            $this->assertEquals(array('1111', 'lengow_access_token', 'lengow_secret_token'), $connector->get_access_id());

            Lengow_Configuration::update_value('lengow_account_id', null);
            Lengow_Configuration::update_value('lengow_access_token', 'lengow_access_token');
            Lengow_Configuration::update_value('lengow_secret_token', 'lengow_secret_token');

            $this->assertEquals(array(null, null, null), $connector->get_access_id());

        }

        /**
         * @covers Lengow_Connector::format
         */
        public function testFormat()
        {
            $connector = new Lengow_Connector('lengow_access_token', 'lengow_secret_token');

            $fixture = New Fixture();
            $result_json = array("id" => 1, "name" => "A green door", "price" => "12.5", "tags" => array("home", "green"));
            //print_r($fixture->invokeMethod($connector, "format", "", "xml")));
            $this->assertEquals($result_json, $fixture->invokeMethod($connector, "format",
                array('{"id": 1,"name": "A green door","price": 12.50,"tags": ["home", "green"]}', "json")));
            $this->assertEquals("simple,plop,/1233;variable", $fixture->invokeMethod($connector, "format", array("simple,plop,/1233;variable", "csv")));

            $string = "<?xml version='1.0'?><document><title>Forty What?</title><from>Joe</from><to>Jane</to><body>I know that's the answer -- but what's the question?</body></document>";
            $this->assertEquals(new SimpleXMLElement($string), $fixture->invokeMethod($connector, "format", array($string, "xml")));
            $this->assertEquals("simple,plop,/1233;variable", $fixture->invokeMethod($connector, "format", array("simple,plop,/1233;variable", "stream")));
            $this->assertEquals('', $fixture->invokeMethod($connector, "format", array("simple,plop,/1233;variable", "plop")));
        }

        /**
         * @covers Lengow_Connector::query_api
         */
        public function testQuery_api()
        {
            $connector = new Lengow_Connector('lengow_access_token', 'lengow_secret_token');
            $this->assertEquals(false, $connector->query_api('plop', "/v3.0/cms"));
            $this->assertEquals(false, $connector->query_api('get', "/v3.0/cms"));

            Lengow_Configuration::update_value( 'lengow_account_id', '123456' );
            Lengow_Configuration::update_value( 'lengow_access_token', 'access_token' );
            Lengow_Configuration::update_value( 'lengow_secret_token', 'secret_token' );

            $error = new stdClass();
            $error->message = 'Forbidden';
            $error->code = '403';
            $result = new stdClass();
            $result->error = $error;
            $this->assertEquals($result, $connector->query_api('get', "/v3.0/cms"));

        }

    }
