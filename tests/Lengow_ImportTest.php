<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-10-26 at 15:39:16.
 */
class Lengow_ImportTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Lengow_Import
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Lengow_Import;
        if ( ! defined( 'LENGOW_PLUGIN_PATH' ) ) {
            define('LENGOW_PLUGIN_PATH', untrailingslashit(plugin_dir_path(__FILE__)));
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Lengow_Import::exec
     * @todo   Implement testExec().
     */
    public function testExec()
    {
        //$result_api_order = file_get_contents( dirname( __FILE__ ) .'/fixtures/import/import_orders.json');
        //$stub = $this->createMock(Lengow_Connector::class);
        //$stub->method('get')->willReturn($result_api_order);
        //$stub->method('post')->willReturn($result_api_order);

        $stub = $this->createMock(Lengow_Main::class);
        $stub->method('decode_log_message')->willReturn($this->returnArgument(0));

        Lengow_Configuration::update_value( 'lengow_import_enabled', 0);

        $import = new Lengow_Import(array('log_output' => false));
        $result = $import->exec();
        $this->assertEquals(false, $result, '[Import] import disabled');

        Lengow_Configuration::update_value( 'lengow_import_enabled', 1);
        Lengow_Configuration::update_value( 'lengow_store_enabled', 1);

        $import = new Lengow_Import(array('log_output' => false));
        $result = $import->exec();

        $this->assertEquals('lengow_log.error.account_id_empty', $result['error'], 'no account id');

        Lengow_Configuration::update_value( 'lengow_account_id', '12345');
        Lengow_Configuration::update_value( 'lengow_access_token', '');
        Lengow_Configuration::update_value( 'lengow_secret_token', '');
        $import = new Lengow_Import(array('log_output' => false));
        $result = $import->exec();

        $this->assertEquals('lengow_log.error.account_id_empty', $result['error'], 'no access and secret');

        $stub = $this->createMock(Lengow_Check::class);
        $stub->method('is_valid_auth')->willReturn(false);

        Lengow_Configuration::update_value( 'lengow_access_token', 'access12345');
        Lengow_Configuration::update_value( 'lengow_secret_token', 'secret12345');
        $import = new Lengow_Import(array('log_output' => false));
        $result = $import->exec();

        $this->assertEquals('lengow_log.exception.credentials_not_valid', $result['error'], 'no access and secret');

        /*
        $stub = $this->createMock(Lengow_Check::class);
        $stub->method('is_valid_auth')->willReturn(true);
        $import = new Lengow_Import(array('log_output' => false));
        $result = $import->exec();
        var_dump($result);

        Impossible car fonction is_valid_auth static donc impossible de mocker
         * $this->assertEquals(3, $result['order_new'], '[Import Orders] nb order new');
        $this->assertEquals(0, $result['order_update'], '[Import Orders] nb order update');
        $this->assertEquals(0, $result['order_error'], '[Import Orders] nb order error');*/
    }

    /**
     * @covers Lengow_Import::is_in_process
     */
    public function testIs_in_process()
    {
        $import = new Lengow_Import(array());

        $import->set_in_process();

        $this->assertEquals(true, $import->is_in_process());

        Lengow_Configuration::update_value( 'lengow_import_in_progress', '' );

        $this->assertEquals(false, $import->is_in_process());

        Lengow_Configuration::update_value( 'lengow_import_in_progress', time() - ( 65 * 1 ) );

        $this->assertEquals(false, $import->is_in_process());

    }

    /**
     * @covers Lengow_Import::check_state
     */
    public function testCheck_state()
    {
        $import = new Lengow_Import(array());

        $order_state_marketplace = '';
        $marketplace = '';

        $this->assertEquals(false, $import->check_state($order_state_marketplace, $marketplace));

        $order_state_marketplace = array();
        $marketplace = '';

        $this->assertEquals(false, $import->check_state($order_state_marketplace, $marketplace));

        $order_state_marketplace = 'order_state';
        $stub = $this->createMock(Lengow_Marketplace::class);
        $stub->method('get_state_lengow')->willReturn('accepted');

        $this->assertEquals(true, $import->check_state($order_state_marketplace, $stub));

    }
}
