<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-11-08 at 17:37:51.
 */
class Lengow_MainTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var Lengow_Main
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Lengow_Main;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	/**
	 * @covers Lengow_Main::get_export_url
	 */
	public function testGet_export_url() {
		$this->assertEquals( "http://example.org/wp-content/plugins/lengow-woocommerce/webservice/export.php",
			$this->object->get_export_url() );
	}

	/**
	 * @covers Lengow_Main::get_cron_url
	 */
	public function testGet_cron_url() {
		$this->assertEquals( "http://example.org/wp-content/plugins/lengow-woocommerce/webservice/cron.php",
			$this->object->get_cron_url() );
	}

	/**
	 * @covers Lengow_Main::check_ip
	 */
	public function testCheck_ip() {
		$_SERVER['SERVER_ADDR'] = "0.0.0.0";
		$this->assertEquals( false, $this->object->check_ip() );

		$_SERVER['SERVER_ADDR'] = "127.0.0.1";
		Lengow_Configuration::update_value( 'lengow_authorized_ip', '127.0.0.1' );
		$this->assertEquals( true, $this->object->check_ip() );
	}

	/**
	 * @covers Lengow_Main::is_new_merchant
	 */
	public function testIs_new_merchant() {
		Lengow_Configuration::update_value( 'lengow_account_id', '' );
		$this->assertEquals( true, $this->object->is_new_merchant() );

		Lengow_Configuration::update_value( 'lengow_account_id', '12345' );
		$this->assertEquals( false, $this->object->is_new_merchant() );
	}

	/**
	 * @covers Lengow_Main::get_token
	 */
	public function testGet_token() {
		Lengow_Configuration::update_value( 'lengow_token', '1234567890' );
		$this->assertEquals( '1234567890', $this->object->get_token() );

		Lengow_Configuration::update_value( 'lengow_token', '' );
		$result = $this->object->get_token();
		$this->assertEquals( Lengow_Configuration::get( 'lengow_token' ), $result );
	}

	/**
	 * @covers Lengow_Main::find_by_token
	 */
	public function testFind_by_token() {
		Lengow_Configuration::update_value( 'lengow_token', '1234567890' );
		$this->assertEquals( true, $this->object->find_by_token( '1234567890' ) );
		$this->assertEquals( false, $this->object->find_by_token( '00000' ) );
		$this->assertEquals( false, $this->object->find_by_token( '' ) );
		Lengow_Configuration::update_value( 'lengow_token', '' );
		$this->assertEquals( true, $this->object->find_by_token( '' ) );
	}

	/**
	 * @covers Lengow_Main::set_log_message
	 */
	public function testSet_log_message() {
		$params = array( 'param1' => 'value1', 'param2' => 'value2' );
		$this->assertEquals( '1234567890', $this->object->set_log_message( '1234567890' ) );
		$this->assertEquals( '', $this->object->set_log_message( '' ) );
		$this->assertEquals( '1234567890[param1==value1|param2==value2]', $this->object->set_log_message( '1234567890', $params ) );
	}

	/**
	 * @covers Lengow_Main::decode_log_message
	 */
	public function testDecode_log_message() {
		$this->assertEquals( '1234567890', $this->object->decode_log_message( '1234567890' ) );
		$this->assertEquals( 'wait 10s seconds before the next import',
			$this->object->decode_log_message( 'toolbox.index.rest_time_to_import', 'GB', array(
				'rest_time' => '10s'
			) ) );
		$this->assertEquals( 'Log Files', $this->object->decode_log_message( 'toolbox.log.log_files[toolbox==0|log==1]' ) );
		$this->assertEquals( 'Do you really want to add 5 products to your selection?',
			$this->object->decode_log_message( 'product.screen.add_confirmation[nb==5]' ) );

	}

	/**
	 * @covers Lengow_Main::update_date_import
	 */
	public function testUpdate_date_import() {
		Lengow_Configuration::update_value( 'lengow_last_import_cron', '0' );
		Lengow_Configuration::update_value( 'lengow_last_import_manual', '0' );
		$time = time() - 10;
		$this->object->update_date_import( 'cron' );
		$this->assertGreaterThan( $time, Lengow_Configuration::get( 'lengow_last_import_cron' ) );
		$this->assertNotEquals( '0', Lengow_Configuration::get( 'lengow_last_import_cron' ) );
		$this->assertEquals( '0', Lengow_Configuration::get( 'lengow_last_import_manual' ) );

		Lengow_Configuration::update_value( 'lengow_last_import_cron', '0' );
		Lengow_Configuration::update_value( 'lengow_last_import_manual', '0' );
		$this->object->update_date_import( 'plop' );
		$this->assertGreaterThan( $time, Lengow_Configuration::get( 'lengow_last_import_manual' ) );
		$this->assertNotEquals( '0', Lengow_Configuration::get( 'lengow_last_import_manual' ) );
		$this->assertEquals( '0', Lengow_Configuration::get( 'lengow_last_import_cron' ) );
	}

	/**
	 * @covers Lengow_Main::get_last_import
	 */
	public function testGet_last_import() {
		Lengow_Configuration::update_value( 'lengow_last_import_cron', '' );
		Lengow_Configuration::update_value( 'lengow_last_import_manual', '' );
		$this->assertEquals( array( 'type' => 'none', 'timestamp' => 'none' ), $this->object->get_last_import() );

		Lengow_Configuration::update_value( 'lengow_last_import_cron', '123' );
		Lengow_Configuration::update_value( 'lengow_last_import_manual', '1234' );
		$this->assertEquals( array( 'type' => 'manual', 'timestamp' => '1234' ), $this->object->get_last_import() );

		Lengow_Configuration::update_value( 'lengow_last_import_cron', '888' );
		Lengow_Configuration::update_value( 'lengow_last_import_manual', '777' );
		$this->assertEquals( array( 'type' => 'cron', 'timestamp' => '888' ), $this->object->get_last_import() );

		Lengow_Configuration::update_value( 'lengow_last_import_cron', '888' );
		Lengow_Configuration::update_value( 'lengow_last_import_manual', '' );
		$this->assertEquals( array( 'type' => 'cron', 'timestamp' => '888' ), $this->object->get_last_import() );

		Lengow_Configuration::update_value( 'lengow_last_import_cron', '' );
		Lengow_Configuration::update_value( 'lengow_last_import_manual', '1234' );
		$this->assertEquals( array( 'type' => 'manual', 'timestamp' => '1234' ), $this->object->get_last_import() );
	}

	/**
	 * @covers Lengow_Main::clean_data
	 */
	public function testClean_data() {
		$this->assertEquals( "¢ß¥£xE0 '™©®ª×÷±²&#150'é'(³¼½¾µ¿¶·¸º°¯§…¤¦≠¬ˆ¨‰àáâãäëìíîïðñòóùúûüýÿ",
			$this->object->clean_data( "¢ß¥£xE0|'™©®ª×÷±²&#150\"é'(³¼½¾µ¿¶·¸º°¯§…¤¦≠¬ˆ¨‰àáâãäëìíîïðñòóùúûüýÿ" ) );
	}

	/**
	 * @covers Lengow_Main::clean_html
	 */
	public function testClean_html() {
		$this->assertEquals( "  '`' &#39' &#150-/\/",
			$this->object->clean_html( "<br /> <br> &nbsp;|\"'`&#39;&#39&#39;&#150&#150;/\/" ) );
	}

	/**
	 * @covers Lengow_Main::replace_accented_chars
	 */
	public function testReplace_accented_chars() {
		$this->assertEquals( "aaaaAAAECeeeEiiÎÏÐNooooÖØOESþuuUUyŸaaaaaaaeceeeeiiiiðnoooooooesÞuuuuyy",
			$this->object->replace_accented_chars( "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØŒŠþÙÚÛÜÝŸàáâãäåæçèéêëìíîïðñòóôõöøœšÞùúûüýÿ" ) );
	}
}
