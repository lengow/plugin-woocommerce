<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-11-09 at 15:09:08.
 */
class Lengow_SyncTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var Lengow_Sync
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Lengow_Sync;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
	}

	/**
	 * @covers Lengow_Sync::get_sync_data
	 */
	/*public function testGet_sync_data()
	{
		$sync = new Lengow_Sync;
		$this->assertEquals('plop', $sync->get_sync_data());
	}*/

	/**
	 * @covers Lengow_Sync::sync
	 */
	public function testSync() {
		$this->assertEquals( null, $this->object->sync( array(
			"plop"  => "plop",
			"plop2" => "plop2",
			"plop3" => "plop3"
		) ) );

		Lengow_Configuration::update_value( 'lengow_token', 'toktok' );
		Lengow_Configuration::update_value( 'lengow_account_id', '1111' );
		Lengow_Configuration::update_value( 'lengow_access_token', 'lengow_access_token' );
		Lengow_Configuration::update_value( 'lengow_secret_token', 'lengow_secret_token' );
		$param = array( "toktok" => array( "plop" => "plop", "plop2" => "plop2", "plop3" => "plop3" ) );
		$this->assertEquals( null, $this->object->sync( $param ) );
		$this->assertEquals( '1111', Lengow_Configuration::get( 'lengow_account_id' ) );
		$this->assertEquals( 'lengow_access_token', Lengow_Configuration::get( 'lengow_access_token' ) );
		$this->assertEquals( 'lengow_secret_token', Lengow_Configuration::get( 'lengow_secret_token' ) );

		Lengow_Configuration::update_value( 'lengow_token', 'toktok' );
		Lengow_Configuration::update_value( 'lengow_account_id', '1111' );
		Lengow_Configuration::update_value( 'lengow_access_token', 'lengow_access_token' );
		Lengow_Configuration::update_value( 'lengow_secret_token', 'lengow_secret_token' );
		$param = array(
			"toktok" => array(
				"account_id"   => "plop",
				"access_token" => "plop2",
				"secret_token" => "plop3"
			)
		);
		$this->assertEquals( null, $this->object->sync( $param ) );
		$this->assertEquals( 'plop', Lengow_Configuration::get( 'lengow_account_id' ) );
		$this->assertEquals( 'plop2', Lengow_Configuration::get( 'lengow_access_token' ) );
		$this->assertEquals( 'plop3', Lengow_Configuration::get( 'lengow_secret_token' ) );

	}

	/**
	 * @covers Lengow_Sync::check_sync_shop
	 */
	public function testCheck_sync_shop() {
		$this->assertEquals( false, $this->object->check_sync_shop() );

//        Lengow_Configuration::update_value('lengow_store_enabled', 1);
//        $stub = $this->createMock(Lengow_Check::class);
//        $stub->method('is_valid_auth')->willReturn(true);
//        $this->assertEquals('plop', $this->object->check_sync_shop());
	}

	/**
	 * @covers Lengow_Sync::get_option_data
	 */
//    public function testGet_option_data()
//    {
//        $this->assertEquals('plop', $this->object->get_option_data());
//    }

	/**
	 * @covers Lengow_Sync::set_cms_option
	 */
	public function testSet_cms_option() {
		Lengow_Configuration::update_value( 'lengow_preprod_enabled', 1 );
		$stub = $this->createMock( Lengow_Main::class );
		$stub->method( 'is_new_merchant' )->willReturn( true );
		$this->assertEquals( false, $this->object->set_cms_option() );

		/*Lengow_Configuration::update_value('lengow_preprod_enabled', 0);
		$stub = $this->createMock(Lengow_Main::class);
		$stub->method('is_new_merchant')->willReturn(false);
		Lengow_Configuration::update_value( 'lengow_last_option_update', time() );
		$this->assertEquals(false, $this->object->set_cms_option());*/

		/*Lengow_Configuration::update_value('lengow_preprod_enabled', 0);
		$stub = $this->createMock(Lengow_Main::class);
		$stub->method('is_new_merchant')->willReturn(false);
		$stub1 = $this->createMock(Lengow_Connector::class);
		$stub1->method('query_api')->willReturn(true);
		$stub1 = $this->createMock(Lengow_Sync::class);
		$stub1->method('get_option_data')->willReturn("{}");
		$this->assertEquals(false, $this->object->set_cms_option());*/
	}

	/**
	 * @covers Lengow_Sync::get_statistic
	 */
	public function testGet_statistic() {
		$result = Array( "total_order" => "0,00", "nb_order" => 0, "currency" => "" );
		$this->assertEquals( $result, $this->object->get_statistic() );

		/*$result = "";
		$stub = $this->createMock(Lengow_Connector::class);
		$stub->method('query_api')->willReturn(false);*/
	}

	/**
	 * @covers Lengow_Sync::get_status_account
	 * @todo   Implement testGet_status_account().
	 */
	public function testGet_status_account() {
		$this->assertEquals( false, $this->object->get_status_account() );
	}
}
